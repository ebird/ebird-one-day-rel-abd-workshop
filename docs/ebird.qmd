---
output: html_document
editor:
    mode: source
editor_options: 
  chunk_output_type: console
---

# eBird Data {#sec-ebird}

eBird data are collected and organized around the concept of a checklist, representing observations from a single birding event, such as a 1 km walk through a park or 15 minutes observing bird feeders in your backyard. All eBird checklists contains a list of species observed and the location and time of the observations. For a subset of checklists, the observer will also provide counts of the number of individuals seen of each species, specify the amount of effort expended while collecting these data, and confirm that they are submitting a complete checklist of all the birds they were able to identify. The data provided by the checklists such as these is often referred to as **semi-structured citizen science data**.

Let's compare two eBird checklists: an [incidental observation with missing counts](https://ebird.org/checklist/S136805959) and a [complete traveling count](https://ebird.org/checklist/S136805666). Both checklists can be useful, but only the second checklist provides the type of semi-structured data required for more rigorous applications.

This lesson will focus on the eBird Reference Dataset (ERD), the collection of semi-structured eBird data used by the eBird Status and Trends team for modeling species distributions and relative abundance. A subset of this dataset for Chile was provided in the data package for this workshop. In the following sections we'll provide an introduction to the ERD, describe the associated prediction grid used to make predictions across space, and highlight some of the challenges associated with using eBird data for analysis.

## eBird Reference Dataset (ERD) {#sec-ebird-erd}

The eBird Reference Dataset (ERD) is a subset of the full eBird database created annually for Status and Trends modeling. Only semi-structured (complete checklists with effort information) traveling and stationary counts from the last 15 years are included in the ERD and we assign a set of environmental variables assigned to checklist.

::: callout-tip
## Tip

This workshop will only cover the eBird Reference Dataset (ERD). For access to the full eBird dataset updated monthly, you'll need to work with the [eBird Basic Dataset (EBD)](https://science.ebird.org/en/use-ebird-data/download-ebird-data-products). For details on working with the EBD consult the [eBird Best Practices book](https://ebird.github.io/ebird-best-practices). Some of the advantages and disadvantages of the two datasts are:

```{r}
#| echo: false
knitr::kable(readr::read_csv("data-raw/erd-ebd-comparison.csv"), escape = FALSE)
```
:::

The ERD is distributed in two parts: observation data and checklist data. In the observation dataset, each row corresponds to the sighting of a single species on a checklist, including the count and any other species-level information. In the checklist dataset, each row corresponds to a checklist, including the date, time, location, effort (e.g. distance traveled, time spent, etc.), and any additional checklist-level information.

For this workshop, and extract of the ERD is provided for Chile in the workshop data package. The observations and checklsits datasets are provided in [parquet format](https://parquet.apache.org/), an open source standard for efficient storage and retrieval of tabular data. If you haven't already done so, following the [instructions in the Introduction](#sec-intro-setup) to create an RStudio project and download the workshop data package. The parquet files should be located at:

```         
data/ebird_observations_chile_2021.parquet
data/ebird_checklists_chile_2021.parquet
```

Let's start by reading these two datasets into R using the `arrow` package and exploring them. We'll start with the checklist dataset.

```{r}
#| label: ebird-erd-checklists
library(arrow)
library(auk)
library(dplyr)
library(ebirdst)
library(ggplot2)
library(sf)
library(terra)

checklists <- read_parquet("data/ebird_checklists_chile_2021.parquet")
glimpse(checklists)
```

There are a huge number of columns in this data frame. The first set of variables provide standard information about the checklist: where and when did the observation occur, what type of search was conducted, and how much search effort was expended. Two important differences exist between these variables and what you will see if you look at the raw eBird dataset: when a GPS track is available we replace the checklist or hotspot location (latitude/longitude) with the centroid of the track and the time of the checklist is expressed as the difference between the checklist midpoint and solar noon, a more ecologically meaningful quantity.

All the remaining variables are not collected in eBird, they're calculated and added by the Status and Trends team based on external data sets. First, those variables beginning with `cds_`, provides information about the weather at the time of the observation, which can impact detectibility. This is followed by a large suite of environmental variables summarized over a 3km diameter circular neighborhood around the checklist location, including variables describing: elevation and topography, land and water cover, roads, and night time lights (a proxy for urban development). Most variables are summarized as two quantities expressing composition (what habitat is available) and configuration (how that habitat is arranged spatially). For continuous variables, such as elevation, we use the median and standard deviation. For categorical variables, such as land cover class, we use percent landcover (`pland`) and edge density (`ed`).

![Example of calculating percent land cover and edge density for a 3km diamter circular neighborhood centered on a checklist location. `pland` for each class is the percent of the circle covered by that class. To calculate `ed` for each class, we add up the perimeter lengths of all patches of that class, then divide by the area of the circle.](images/landscape-metrics.png)

The land and water cover variables can be challenging to interpret based on their names alone (e.g. `mcd12q1_lccs1_fs_c12_1500_pland`); however, these names can be looked up in the `ebirdst_predictors` data frame from the `ebirdst` package. For example, let's look up what `mcd12q1_lccs1_fs_c12_1500_pland` corresponds to.

```{r}
#| label: ebird-erd-predlookup
filter(ebirdst_predictors, predictor == "mcd12q1_lccs1_fs_c12_1500_pland") %>% 
  select(predictor, predictor_label)
```

::: callout-important
## Checkpoint

Take some time to explore the variables in the checklist dataset. Try looking up a variable in `ebirst_predictors`. Ask for help if you need clarification on the meaning of any of the variables.
:::

Now let's look at the observation dataset.

```{r}
#| label: ebird-erd-obs
observations <- read_parquet("data/ebird_observations_chile_2021.parquet")
glimpse(observations)
```

This is a much simpler dataset with only five columns:

-   `checklist_id`: unique identifier for the checklist that this observation belongs to. Allows joining the observation data to the checklist data.
-   `species_code`: unique identifier for the species that this observation was made for.
-   `valid`: a binary variable indicating is the observation was determined to be valid (`TRUE`) or invalid (`FALSE`) by the eBird reviewers.
-   `obs_detected`: a binary variable indicating if the species was detected (1) or not detected (0). Since this is a dataset of observations only, `obs_detected` is always 1; however, having this variable will become useful when we join to the checklist dataset in the next section.
-   `obs_count`: count of the number of individuals or an `NA` if no count was provided (if an "X" was entered for count on the eBird checklist).

::: callout-tip
## Tip

To look up the common name or scientific name of a species try appending the species code to the URL `https://ebird.org/species/`. For example, visit <https://ebird.org/species/eardov1> to look up the species code `eardov1`. This information is also available in the `ebird_taxonomy` data frame in the `auk` package.

```{r}
#| label: ebird-erd-species
filter(ebird_taxonomy, species_code == "eardov1") %>% 
  select(species_code, common_name, scientific_name, family)
```
:::

## Zero-filling eBird data {#sec-ebird-zf}

Complete eBird checklists are extremely valuable because, for all species that weren't reported, we can infer counts of 0. This allows us to convert eBird from presence only data to detection/non-detection data, which allows for much more robust analyses. Note that we don't use the term presence/absence data here because a non-detection doesn't necessarily imply the species was absent, only that observer wasn't able to detect and identify it.

We refer to the process of producing detection/non-detection data as "zero-filling" the eBird data because we're filling in the missing zeros. Let's consider observations of [Chucao Tapaculo](https://ebird.org/species/chutap1/) (species code `chutap1`).

```{r}
#| label: ebird-zf-det
chutap1_detections <- observations %>% 
  filter(species_code == "chutap1") %>% 
  select(checklist_id, valid, obs_detected, obs_count)
```

Next join this set of detections to the complete set of checklists, including detections and non-detections.

```{r}
#| label: ebird-zf-join
chutap1_all <- left_join(checklists, chutap1_detections, by = "checklist_id") %>%
  select(checklist_id, latitude, longitude, year, day_of_year,
         valid, obs_detected, obs_count)
head(chutap1_all)
```

Finally, for rows where Chucao Tapaculo was not detected we can replace the missing counts with 0. At this time, we recommend removing any checklists with `valid == 0` because there is uncertainty about whether or not the species was detected.

```{r}
#| label: ebird-zf-zf
chutap1_zf <- chutap1_all %>% 
  filter(is.na(valid) | valid == 1) %>% 
  mutate(
    # checklist not in the observations dataset are non-detections
    obs_detected = coalesce(obs_detected, 0L),
    # non-detections correspond to a count of 0
    obs_count = if_else(obs_detected == 1, obs_count, 0)
  )
```

We can now, for example, make a map of Chucao Tapaculo observations in the Chilean region of Los Lagos. We'll use spatial data that was prepared in advance and provided in the data package.

```{r}
#| label: ebird-zf-map
# load and project gis data
map_proj <- "+proj=laea +lat_0=-40 +lon_0=-72"
ne_land <- read_sf("data/gis-data.gpkg", "ne_land") %>% 
  st_transform(crs = map_proj) %>% 
  st_geometry()
ne_country_lines <- read_sf("data/gis-data.gpkg", "ne_country_lines") %>% 
  st_transform(crs = map_proj) %>% 
  st_geometry()
ne_state_lines <- read_sf("data/gis-data.gpkg", "ne_state_lines") %>% 
  st_transform(crs = map_proj) %>% 
  st_geometry()
los_lagos <- read_sf("data/gis-data.gpkg", "ne_states") %>% 
  filter(state_code == "CL-LL") %>% 
  st_transform(crs = map_proj) %>% 
  st_geometry()

# prepare ebird data for mapping
chutap1_sf <- chutap1_zf %>% 
  # convert to spatial points
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>% 
  st_transform(crs = map_proj)

# map
par(mar = c(0.25, 0.25, 0.25, 0.25))
# set up plot area
plot(st_geometry(los_lagos), col = NA, border = NA)
# contextual gis data
plot(ne_land, col = "#cfcfcf", border = "#888888", lwd = 0.5, add = TRUE)
plot(los_lagos, col = "#e6e6e6", border = NA, add = TRUE)
plot(ne_state_lines, col = "#ffffff", lwd = 0.75, add = TRUE)
plot(ne_country_lines, col = "#ffffff", lwd = 1.5, add = TRUE)
# ebird observations
# all
plot(chutap1_sf,
     pch = 19, cex = 0.1, col = scales::alpha("#555555", 4),
     add = TRUE)
# detection
plot(filter(chutap1_sf, obs_detected == 1),
     pch = 19, cex = 0.3, col = scales::alpha("#4daf4a", 1),
     add = TRUE)
# legend
legend("bottomright", bty = "n",
       col = c("#555555", "#4daf4a"),
       legend = c("eBird checklists", "Chucao Tapaculo sightings"),
       pch = 19)
box()
par(new = TRUE, mar = c(0, 0, 3, 0))
title("Chucao Tapaculo eBird Observations\nJune 2007-2021")
```

::: {.callout-caution icon="false"}
## Exercise

Try producing zero-filled, detection/non-detection data for another species.
:::

::: {.callout-note icon="false" collapse="true"}
## Solution

For example, to produce detection/non-detection data for [Thorn-tailed Rayadito](https://ebird.org/species/thtray1) use:

```{r}
#| label: sec-ebird-zf-sol
thtray1_zf <- observations %>% 
  filter(species_code == "thtray1") %>% 
  left_join(checklists, ., by = "checklist_id") %>% 
  filter(is.na(valid) | valid == 1) %>% 
  mutate(obs_detected = coalesce(obs_detected, 0),
         obs_count = if_else(obs_detected == 1, obs_count, 0)) %>% 
  select(checklist_id, obs_detected, obs_count)
head(thtray1_zf)
```
:::

## Prediction grid {#sec-ebird-pred}

The ultimate goal of modeling the occurrence or abundance of a species is frequently to produce a map showing the distribution of that species in space. To do so, we need to know the values of our predictor variables over the region that we intend to make predictions. To make this possible, the ERD is distributed with a **prediction grid**: a regular grid of points covering the entire globe spaced 3km apart for which all the environmental variables have been calculated for the year 2021. Internally, we often refer to this prediction grid as the Spatial Reference Dataset (SRD).

The data package for this course contains a subset of the prediction grid for Chile. The file `data/ebird_prediction-grid_chile_2021.parquet` contains the environmental variables for each point on the grid and the file `data/prediction-grid_template.tif` is a 3km by 3km raster template where each each cell center is a point on the prediction grid. Let's start by examining the environmental variables.

```{r}
#| label: ebird-pred-envvar
prediction_grid <- read_parquet("data/ebird_prediction-grid_chile_2021.parquet")
glimpse(prediction_grid)
```

These variables should be mostly familiar from the ERD, except for `srd_id` which is a unique identifier for each point on the grid. Next let's load the raster template using the `terra` package.

```{r}
#| label: ebird-pred-template
raster_template <- rast("data/prediction-grid_template.tif")
raster_template
```

This is a global 2.96km by 2.96km square grid in an equal area projection. We can use the `terra` function `rasterize` to insert values from the prediction grid into the template for mapping. For example, let's make a raster dataset of percent cover of evergreen broadleaf forest (`mcd12q1_lccs1_fs_c12_1500_pland`).

```{r}
#| label: ebird-pred-rasterize
forest_cover <- prediction_grid %>% 
  # convert to spatial object using sf
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>% 
  # transform to the coordinate reference system of the raster
  st_transform(crs = crs(raster_template)) %>% 
  # rasterize the points using the raster template
  rasterize(raster_template, field = "mcd12q1_lccs1_fs_c12_1500_pland")
```

Now we can make a simple map of evergreen broadleaf forest for Chile. Not that the raster template is global, but we can use `trim()` to remove all areas that have missing values for a map of Chile only.

```{r}
#| label: ebird-pred-map
plot(trim(forest_cover), axes = FALSE)
```

The map looks distorted because the prediction grid uses a sinusoidal projection, which works well for analysis but not for mapping. In the next lesson, we'll demonstrate how to project data into a coordinate reference system more suitable for mapping.

## Spatial and temporal bias {#sec-ebird-bias}

Despite the strengths of eBird data, species observations collected through citizen science projects exhibit both spatial and temporal bias requiring special care when using them for rigorous analyses. **Spatial bias** occurs because eBird participants are more likely to be collect data near their homes, in easily accessible areas such as roadsides, or in areas known to be good for birding. Looking at the above map of Chucao Tapaculo observations it's clear that the eBird checklists are clustered around cities and roads. **Temporal bias** occurs because participants preferentially collect data when they are available, such as weekends, and at times of year when they expect to observe more birds, notably during the breeding season. We can plot the distribution of checklists over the days of the year to see this bias:

```{r}
#| label: sec-ebird-bias-dayplot
checklist_per_day <- checklists %>% 
  filter(day_of_year < 366) %>% 
  count(day_of_year)
ggplot(checklist_per_day) +
  aes(x = day_of_year, y = n) +
  geom_line() +
  scale_y_continuous(labels = scales::comma) +
  labs(x = "Day of Year", y = "# checklists",
       title = "Daily eBird checklists submission") +
  theme_gray()
```

Three is a clear seasonal pattern to the number of eBird checklists submitted (fewer checklists in the winter) as well as daily and weekly variation within seasons. In addition, there are two huge spikes in checklists submissions, one in May and the other in October, what do you think could be causing these sudden increases?

Finally, for most species, there is strong **class imbalance** in the data, meaning there are usually many more non-detections than detections. As a results, a distribution model predicting that the species is absent everywhere will have high accuracy, but no ecological value. For example, the prevalence rate of Chucao Tapaculo in Chile is only `r scales::percent(mean(chutap1_zf$obs_detected))`.

```{r}
#| label: sec-ebird-bias-prev
mean(chutap1_zf$obs_detected)
```

To address these three issues (spatial bias, temporal bias, and class imbalance) we recommend subsampling the data using a technique called **case controlled grid sampling**. We overlay an equal area 3km by 3km grid over the checklists, then sample one detection and one non-detection from each grid cell for each week of each year. Let's look at a simple example of how spatial grid sampling works."

![1. Take one week of eBird observations. Detections are show in [**green**]{style="color:#4daf4a"} and non-detections are shown in [**gray**]{style="color:#555555"}.](images/grid-sampling_1.png)

![2. Separate the detections and non-detections. In this example, there is a higher density of observations in the lower right corner of the region and the prevalence of detections is 2%.](images/grid-sampling_2.png)

![3. Overlay an equal area grid on top of the points, For Status and Trends we use a 3km by 3km grid.](images/grid-sampling_3.png)

![4. Sample one checklist from each grid cell.](images/grid-sampling_4.png)

![5. Recombine the detections and non-detections. The observations are much more evenly distributed in space and the prevalence of detections has increased from 2% to 20%.](images/grid-sampling_5.png)

The function `grid_sample_stratified()` from the `ebirdst` package is specifically designed to perform case controlled grid sampling on eBird data. For example, let's apply this technique to the Chucao Tapaculo observations.

```{r}
#| label: sec-ebird-bias-sample
# perform case controlled grid sampling
chutap1_sampled <- grid_sample_stratified(chutap1_zf, 
                                          obs_column = "obs_detected")

# how many checklists were removed?
nrow(chutap1_zf)
nrow(chutap1_sampled)

# how has prevalence changed
mean(chutap1_zf$obs_detected)
mean(chutap1_sampled$obs_detected)
```

So, after sampling, we're left with `r scales::percent(nrow(chutap1_sampled) / nrow(chutap1_zf))` of the observations we started with, but the spatial and temporal bias has been significantly reduced.

We now have the data and tools necessary to model relative abundance using eBird data, which will be the focus of [Lesson -@sec-abundance].
