---
output: html_document
editor:
    mode: source
editor_options: 
  chunk_output_type: console
---

# eBird Data {#sec-ebird}

eBird data are collected and organized around the concept of a checklist, representing observations from a single birding event, such as a 1 km walk through a park or 15 minutes observing bird feeders in your backyard. All eBird checklists contains a list of species observed and the location and time of the observations. For a subset of checklists, the observer will also provide counts of the number of individuals seen of each species, specify the amount of effort expended while collecting these data, and confirm that they are submitting a complete checklist of all the birds they were able to identify. The data provided by the checklists such as these is often referred to as **semi-structured citizen science data**.

Let's compare two eBird checklists: an [incidental observation with missing counts](https://ebird.org/checklist/S136805959) and a [complete traveling count](https://ebird.org/checklist/S136805666). Both checklists can be useful, but only the second checklist provides the type of semi-structured data required for more rigorous applications.

This lesson will focus on the eBird Reference Dataset (ERD), the collection of semi-structured eBird data used by the eBird Status and Trends team for modeling species distributions and relative abundance. A subset of this dataset for Chile was provided in the data package for this workshop. In the following sections we'll provide an introduction to the ERD, describe the associated prediction grid used to make predictions across space, and highlight some of the challenges associated with using eBird data for analysis.

## Downloading data {#sec-ebird-download}

eBird data are released as two tab-separated text files: the *eBird Basic Dataset (EBD)* containing observation data and the *Sampling Event Data (SED)* containing checklist data. These files are released monthly and contain all validated bird sightings in the eBird database at the time of release. In the EBD, each row corresponds to the sighting of a single species on a checklist, including the count and any other species-level information (e.g. age, sex, species comments, etc.). In the SED, each row corresponds to a checklist, including the date, time, location, effort (e.g. distance traveled, time spent, etc.), and any additional checklist-level information (e.g. whether this is a complete checklist or not).

In this workshop, we'll use [Fork-tailed Flycatcher](https://ebird.org/species/fotfly) observations from Rio Grande do Sul, Brazil as an example. We'll start by downloading the corresponding eBird observation (EBD) and checklist (SED) data by visiting the [eBird Basic Dataset](https://ebird.org/data/download/ebd) download page and filling out the Custom Download form to request Fork-tailed Flycatcher observations from Rio Grande do Sul. **Make sure you check the box "Include sampling event data"**, which will include the SED in the data download in addition to the EBD.

![](images/ebird-data_download.png)

::: callout-tip
## Tip

The eBird database contains a massive amount of data! When requesting eBird data to download it's important to narrow the request to as small a subset of the data as possible. For example, if we request all Fork-tailed Flycatcher observations globally, the dataset may be too large to work with in R. Instead, we've only requested data for a single state in Brazil.
:::

Once the data are ready, you will receive an email with a download link. The downloaded data will be in a compressed .zip format, and should be unarchived. The resulting directory will contain a two text files: one for the EBD (e.g. `ebd_BR-RS_fotfly_smp_relJun-2023.txt`) containing all the Fork-tailed flycatcher observations from Rio Grande do Sul, and one for the SED (e.g. `ebd_BR-RS_fotfly_smp_relJun-2023_sampling.txt`) containing all checklists from Rio Grande do Sul, The `relJune-2023` component of the file name describes which version of the EBD this dataset came from; in this case it's the June 2023 release.

If you would prefer to directly download the exact dataset used in this workshop, download the [data package for this workshop](index.qmd#sec-intro-data).

## Importing eBird data into R {#sec-ebird-import}

The previous step left us with two tab separated text files, one for the EBD (i.e. observation data) and one for the SED (i.e. checklist data). Start a new RStudio project and put the downloaded text files in the `data/` sub-directory of the project directory.

The `auk` R package is specifically designed for working with eBird data. It includes the functions [`read_ebd()`](https://cornelllabofornithology.github.io/auk/reference/read_ebd.html) and [`read_sampling()`](https://cornelllabofornithology.github.io/auk/reference/read_ebd.html) for importing the EBD and SED, respectively, into R. First let's import the checklist data (SED).

```{r}
#| label: ebird-import-sed
library(auk)
library(dplyr)
library(ggplot2)
library(lubridate)
library(sf)

f_sed <- "data/ebd_BR-RS_fotfly_smp_relJun-2023_sampling.txt"
checklists <- read_sampling(f_sed, unique = FALSE)
glimpse(checklists)
```

::: callout-important
## Checkpoint

Take some time to explore the variables in the checklist dataset. If you're unsure about any of the variables, consult the metadata document that came with the data download (`eBird_Basic_Dataset_Metadata_v1.14.pdf`).
:::

For some applications, only the checklist data are required. For example, the checklist data can be used to investigate the spatial and temporal distribution of eBird data within a region. This dataset can also be used to explore how much variation there is in the observation effort variables and identify checklists that have low spatial or temporal precision.

::: {.callout-caution icon="false"}
## Exercise

Make a histogram of the distribution of distance traveling for traveling protocol checklists.
:::

::: {.callout-note icon="false" collapse="true"}
## Solution

Nearly 90% of checklists are less than 10km in length; however, some checklists are as long as 80km in length. Long traveling checklists have lower spatial precision so they should generally be removed prior to analysis.

```{r}
#| label: ebird-import-distance-sol
checklists_traveling <- filter(checklists, protocol_type == "Traveling")
ggplot(checklists_traveling) +
  aes(x = effort_distance_km) +
  geom_histogram(binwidth = 5) +
  scale_y_continuous(limits = c(0, NA), labels = scales::comma) +
  labs(x = "Distance traveled [km]",
       y = "# of eBird checklists",
       title = "Distribution of distance traveled on eBird checklists")
```
:::

Next, let's import the observation data.

```{r}
#| label: ebird-import-ebd
f_ebd <- "data/ebd_BR-RS_fotfly_smp_relJun-2023.txt"
observations <- read_ebd(f_ebd, unique = FALSE, rollup = FALSE)
glimpse(observations)
```

::: callout-important
## Checkpoint

Take some time to explore the variables in the observation dataset. Notice that the EBD duplicates many of the checklist-level variables from the SED.
:::

When we read the data into R, we used `unique = FALSE` and `rollup = FALSE`. By default the read functions in `auk` perform two important pre-processing steps: **combining duplicate shared checklists** and **taxonomic rollup**. We intentionally turned off this functionality for the purposes of demonstration.

### Shared checklists {#sec-ebird-import-shared}

eBird allows users to [share checklists](https://support.ebird.org/en/support/solutions/articles/48000625567-checklist-sharing-and-group-accounts#anchorShareChecklists) with other eBirders in their group, for example [this checklist](https://ebird.org/checklist/S95914477) is shared by 10 observers. These checklists can be identified by looking at the `group_identifier` variable, which assigns an ID connecting all checklists in the group.

```{r}
#| label: ebird-import-shared-example
checklists %>% 
  filter(!is.na(group_identifier)) %>% 
  arrange(group_identifier) %>% 
  select(sampling_event_identifier, group_identifier)
```

Checklists with the same `group_identifier` provide duplicate information on the same birding event in the eBird database. For most analyses, it's important to collapse these shared checklists down into a single checklist. This can be accomplished with the function [`auk_unique()`](https://cornelllabofornithology.github.io/auk/reference/auk_unique.html), which retains only one independent copy of each checklist.

```{r}
#| label: ebird-import-shared-unique
checklists_unique <- auk_unique(checklists, checklists_only = TRUE)
nrow(checklists)
nrow(checklists_unique)
```

Notice that a new variable, `checklist_id`, was created that is set to `group_identifier` for shared checklists and `sampling_event_identifier` for non-shared checklists.

```{r}
#| label: ebird-import-shared-group
head(checklists_unique$checklist_id)
tail(checklists_unique$checklist_id)
```

::: callout-tip
## Tip

Curious what checklists and observers contributed to a shared checklist after it has been collapsed? The `sampling_event_identifier` and `observer_id` contain comma-separated lists of all checklists and observers that went into the shared checklists.

```{r}
#| label: ebird-import-shared-tip
checklists_unique %>% 
  filter(checklist_id == "G10019405") %>% 
  select(checklist_id, group_identifier, sampling_event_identifier, observer_id)
```
:::

### Taxonomic rollup {#sec-ebird-import-rollup}

eBird observations can be made at levels below species (e.g. subspecies) or above species (e.g. a bird that was identified as a duck, but the species could not be determined); however, for most uses we'll want observations at the species level. This is especially true if we want to produce detection/non-detection data from complete checklists because "complete" only applies at the species level.

::: callout-tip
## Tip

In the example dataset used for this workshop, these taxonomic issues don't apply. We have requested Fork-tailed Flycatcher observations, so we haven't received any observations for taxa above species, and Fork-tailed Flycatcher only has a single subspecies within Rio Grande do Sul. However, in many other situations, these taxonomic issues can be important. For example, [this checklist](https://ebird.org/checklist/S100099262) has 10 Yellow-rumped Warblers, 5 each of two Yellow-rumped Warbler subspecies, and one hybrid between the two subspecies. `auk_rollup()` will combine all four of these observations into a single Yellow-rumped Warbler observation.
:::

The function [`auk_rollup()`](https://cornelllabofornithology.github.io/auk/reference/auk_rollup.html) drops all observations not identifiable to a species and rolls up all observations reported below species to the species level.

```{r}
#| label: ebird-import-rollup
observations_rollup <- auk_rollup(observations)
# only one checklist is affected by this
observations %>% 
  filter(sampling_event_identifier == "S99335111") %>% 
  select(sampling_event_identifier, common_name, subspecies_common_name, 
         observation_count)
observations_rollup %>% 
  filter(sampling_event_identifier == "S99335111") %>% 
  select(sampling_event_identifier, common_name,
         observation_count)
```

::: callout-tip
## Tip

If multiple taxa on a single checklist roll up to the same species, `auk_rollup()` attempts to combine them intelligently. If each observation has a count, those counts are added together, but if any of the observations is missing a count (i.e. the count is "X") the combined observation is also assigned an "X". In the [example checklist](https://ebird.org/checklist/S100099262) from the previous tip, with four taxa all rolling up to Yellow-rumped Warbler, `auk_rollup()` will add the four counts together to get 21 Yellow-rumped Warblers (10 + 5 + 5 + 1).
:::

## Generating detection/non-detection data {#sec-ebird-zf}

Complete eBird checklists are extremely valuable because, for all species that weren't reported, we can infer counts of 0. This allows us to convert eBird from presence only data to detection/non-detection data, which allows for much more robust analyses. Note that we don't use the term presence/absence data here because a non-detection doesn't necessarily imply the species was absent, only that the observer didn't detect and identify it.

We refer to the process of producing detection/non-detection data as "zero-filling" the eBird data because we're filling in the missing zeros. We'll read the eBird data into R again, filter to only complete checklists, then use the function [`auk_zerofill()`](https://cornelllabofornithology.github.io/auk/reference/auk_zerofill.html) to generate detection/non-detection data. Note that shared checklists are combined and taxonomic rollup is performed by default when using the `read_*()` functions from `auk`.

```{r}
#| label: ebird-zf-zf
# import checklist data
checklists <- read_sampling(f_sed) %>% 
  # subset to complete checklists
  filter(all_species_reported)
# import observation data
observations <- read_ebd(f_ebd) %>% 
  # subset to complete checklists
  filter(all_species_reported)
# zero-fill to produce detection/non-detection data
zf <- auk_zerofill(observations, checklists, collapse = TRUE)
glimpse(zf)
```

The `observation_count` variable has true counts as well as "X"s, which indicate that the species was detected but the number of individuals was not counted. `auk_zerofill()` adds a new binary column, `species_observed`, indicating whether or not the species was detected.

```{r}
#| label: ebird-zf-x
select(zf, observation_count, species_observed) %>% 
  head(10)
```

Let's convert the "X"s to NAs and transform `observation_count` to an integer variable.

```{r}
#| label: ebird-zf-nox
zf$observation_count <- if_else(zf$observation_count == "X", 
                                NA_character_, zf$observation_count) %>% 
  as.integer()
select(zf, observation_count, species_observed) %>% 
  head(10)
```

## Filtering data {#sec-ebird-filtering}

Now that you have a detection/non-detection dataset, it's likely that you want to do something with it. For example, you may want to make a map, identify priority areas for a species, or train a species distribution model. Regardless of the specific application, it's likely that some amount of filtering of the data is required first. Some of the ways you may want to filter eBird data include:

- **Temporal filtering**: filter the data to a specific range of years or to a specific time of year.
- **Spatial filtering**: filter the data to focus on a specific region, e.g. a protected area.
- **Increasing precision**: some eBird checklists are quite long in distance or duration leading to spatial or temporal imprecision. By removing longer checklists we can increase the spatial precision of the dataset.
- **Reducing variation in effort**: unlike structured scientific surveys, data can be submitted to eBird using a variety of protocols and there is significant variation in effort between checklists in the eBird dataset. Variation in protocol and effort leads to variation in detectability (more effort generally leads to higher detectability). We can choose to impose more structure on the eBird dataset by filtering to reduce variation in protocol and effort.

The specific filtering you apply will depend on how you intend to use the eBird data. However, for the sake of this example, let's filter the eBird data to only traveling and stationary checklists from 2013-2022 that are less than 6 hours in duration and 10 km in length.

```{r}
#| label: ebird-filtering-filter
zf_filtered <- zf %>% 
  filter(year(observation_date) >= 2013, year(observation_date) <= 2022,
         protocol_type %in% c("Traveling", "Stationary"),
         duration_minutes < 6 * 60,
         effort_distance_km < 10 | protocol_type == "Stationary")
nrow(zf)
nrow(zf_filtered)
```

We reduced the number of checklists by `r scales::comma(nrow(zf) - nrow(zf_filtered))`, but the checklists remaining are of higher quality.

Finally, many of the columns in this data frame are unnecessary or redundant, so we'll select only the columns we need.

```{r}
#| label: ebird-filtering-select
checklists_zf <- zf_filtered %>% 
  select(checklist_id, 
         latitude, longitude,
         observation_date, time_observations_started,
         protocol_type,
         duration_minutes, effort_distance_km, number_observers,
         observation_count, species_observed)
```

## Applications {#sec-ebird-applications}

### Detection frequency {#sec-ebird-applications-freq}

The simplest thing we can do with these eBird observations is estimate the frequency of detection of Fork-tailed Flycatcher within Rio Grande do Sul. This is the proportion of eBird checklists in the region that detected the species. `species_observed` is a binary `TRUE/FALSE` column indicating if a species was detected and R treats `TRUE` as 1 and `FALSE` as 0, so we can take the average of this column to get the detection frequency.

```{r}
#| label: ebird-applications-freq-total
mean(checklists_zf$species_observed)
```

So, Fork-tailed Flycatcher is fairly common within this region with `r scales::percent(mean(checklists_zf$species_observed))` of checklists detecting the species. Detection frequency can be used to compare the prevalence of a species between regions or over time. For example, Fork-tailed Flycatcher is migratory, so let's look at how detection frequency changes over the months of the year.

```{r}
#| label: ebird-applications-freq-monthly
monthly_detection <- checklists_zf %>% 
  mutate(month = month(observation_date)) %>% 
  group_by(month) %>% 
  summarize(detection_frequency = mean(species_observed))

# plot monthly detection frequency
ggplot(monthly_detection) +
  aes(x = month, y = detection_frequency) +
  geom_line() +
  geom_point() +
  scale_x_continuous(breaks = 1:12) +
  scale_y_continuous(labels = scales::percent) +
  labs(x = "Month of year",
       y = "Detection frequency",
       title = "Monthly detection frequency for Fork-tailed Flycatcher",
       subtitle = "Rio Grande do Sul, Brazil")
```

Based on this chart, Fork-tailed Flycatcher appears to arrive in Rio Grande do Sul in September and depart in February.

::: {.callout-caution icon="false"}
## Exercise

Use a similar technique to calculate and plot the monthly number of eBird checklists in Rio Grande do Sul. Are there differences between months? If so, what does this tell you about using number of detections from presence-only as a measure of prevalence?
:::

::: {.callout-note icon="false" collapse="true"}
## Solution

There is significant variability in checklist submissions per month, with twice as many checklists in February as October. If we were to look at the monthly number of detections from presence-only data we would expect more detections in months with more checklists even if the prevalence of Fork-tailed Flycatcher is the same.

```{r}
#| label: ebird-applications-freq-sol
monthly_checklists <- count(checklists_zf, month = month(observation_date))

# plot monthly number of checklists
ggplot(monthly_checklists) +
  aes(x = month, y = n) +
  geom_line() +
  geom_point() +
  scale_x_continuous(breaks = 1:12) +
  scale_y_continuous(limits = c(0, NA), labels = scales::comma) +
  labs(x = "Month of year",
       y = "# of eBird checklists",
       title = "Monthly eBird checklist submissions in Rio Grande do Sul")
```
:::

### Converting to spatial format {#sec-ebird-applications-spatial}

Many applications of eBird data require converting the data into an explicitly spatial format, for example, to make a map or subset the observations to only those within a polygon for a protected area. The R package [`sf`](https://r-spatial.github.io/sf/) can be use to represent spatial points, lines, and polygons in R. We can convert the data frame of checklists to an `sf` object using the latitude and longitude.

```{r}
#| label: ebird-applications-spatial-convert
checklists_sf <- st_as_sf(checklists_zf, coords = c("longitude", "latitude"),
                          # 4326 is the code for an unprojected lon/lat
                          # coordiante reference system
                          crs = 4326)
print(checklists_sf)
```

Imagine that we're only interested in observations from within 50 km of Gramado, Brazil (29.375°S, 50.876°W). We can use `sf` to generate a circle of radium 50 km centered on Gramado, then subset observations to only those falling within the circle.

```{r}
#| label: ebird-applications-spatial-gramado
gramado_point <- st_sfc(st_point(c(-50.876, -29.375)), crs = 4326)
# 50km = 50,000m
gramado_circle <- st_buffer(gramado_point, dist = 50000)
checklists_gramado <- checklists_sf[gramado_circle, ]
```

We could now, for example, calculate the detection frequency in the area around Gramado.

```{r}
#| label: ebird-applications-spatial-freq
mean(checklists_gramado$species_observed)
```

Finally, in many cases, it may be more convenient to work with eBird data outside of R in a GIS such as [QGIS](https://qgis.org/en/site/), a free and open source GIS. We can export the Fork-tailed Flycatcher observations to a GeoPackage using `sf`.

```{r}
#| label: ebird-applications-spatial-export
#| eval: false
write_sf(checklists_sf, "data/fotfly-ebird_br-rs.gpkg",
         layer = "fotfly_observations")
```

::: callout-tip
## Tip

The [GeoPackage](https://www.geopackage.org/) is a modern, open source alternative to the shapefile format for storing spatial data. GeoPackages avoid many of the problems and limitations associated with shapefiles, and they are much more efficient than shapefiles. The online ArcGIS documentation provides [instructions for how to open a GeoPackage in ArcGIS](https://desktop.arcgis.com/en/arcmap/latest/manage-data/databases/connect-sqlite.htm).
:::

### Mapping {#sec-ebird-applications-mapping}

Now that we have the data in a spatial format, we can produce a map of the Fork-tailed Flycatcher detection/non-detection data. For complex, highly customized maps, we recommend using a GIS such as QGIS that's specifically designed for cartography. However, it is possible to make a quick, simple map in R.

We'll start by loading polygons defining coutry and state borders, which will provide contextual information for our map. These polygons come from [Natural Earth](https://www.naturalearthdata.com/downloads/), and excellent source of global, attribution free spatial data. The R package `rnaturalearth` provides access to Natural Earth data within R; however, for convenience we've provided the necessary layers in the file `data/gis-data.gpkg` included in the [data package](index.qmd#sec-intro-data) for this workshop. We'll also project everything to an equal area projection center on Rio Grande do Sul.

```{r}
#| label: ebird-applications-mapping-ne
crs <- st_crs("+proj=laea +lat_0=-30 +lon_0=-50")

# polygons from natural earth
ne_land <- read_sf("data/gis-data.gpkg", "ne_land") %>% 
  st_transform(crs = crs)
ne_country_lines <- read_sf("data/gis-data.gpkg", "ne_country_lines") %>% 
  st_transform(crs = crs)
rgds_boundary <- read_sf("data/gis-data.gpkg", "ne_states") %>% 
  filter(state_code == "BR-RS") %>% 
  st_transform(crs = crs)

# transform ebird data to equal area projection
checklists_proj <- st_transform(checklists_sf, crs = crs)
```

Now we can make a map of observations of Fork-tailed Flycatcher in Rio Grande do Sul. We build up the map in layers, first creating a basemap with the Natural Earth polygons, then plotting the eBird detection and non-detection data on top. When building up a map in layes like this, it's often useful to first plot a blank version the main dataset you intend to map to define the spatial extent of the map, then layer everything else on top, finishing with plotting the data a second time so it appears as the top layer.

```{r}
#| label: ebird-applications-mapping-map
par(mar = c(0.25, 0.25, 2, 0.25))

# start with a blank plot of the data to define the spatial extent of the map
plot(st_geometry(checklists_proj), col = NA)

# contextual gis data
plot(ne_land, col = "#dddddd", border = "#888888", lwd = 0.5, add = TRUE)
plot(rgds_boundary, col = "#cccccc", border = NA, add = TRUE)
plot(ne_country_lines, col = "#ffffff", lwd = 1.5, add = TRUE)

# ebird observations
# not detected
plot(filter(checklists_proj, !species_observed),
     pch = 19, cex = 0.2, col = alpha("#555555", 0.5),
     add = TRUE)
# detected
plot(filter(checklists_proj, species_observed),
     pch = 19, cex = 0.3, col = alpha("#4daf4a", 1),
     add = TRUE)
# legend
legend("bottomright", bty = "n",
       col = c("#555555", "#4daf4a"),
       legend = c("eBird checklists", "Fork-tailed Flycatcher sightings"),
       pch = 19)
box()
title("Fork-tailed Flycatcher eBird Observations (2013-2022)")
```


## eBird Reference Dataset (ERD) {#sec-ebird-erd}

The eBird Reference Dataset (ERD) is a subset of the full eBird database created annually for Status and Trends modeling. Only semi-structured (complete checklists with effort information) traveling and stationary counts from the last 15 years are included in the ERD and we assign a set of environmental variables assigned to checklist.

::: callout-tip
## Tip

This workshop will only cover the eBird Reference Dataset (ERD). For access to the full eBird dataset updated monthly, you'll need to work with the [eBird Basic Dataset (EBD)](https://science.ebird.org/en/use-ebird-data/download-ebird-data-products). For details on working with the EBD consult the [eBird Best Practices book](https://ebird.github.io/ebird-best-practices). Some of the advantages and disadvantages of the two datasts are:

```{r}
#| echo: false
knitr::kable(readr::read_csv("data-raw/erd-ebd-comparison.csv"), escape = FALSE)
```
:::

The ERD is distributed in two parts: observation data and checklist data. In the observation dataset, each row corresponds to the sighting of a single species on a checklist, including the count and any other species-level information. In the checklist dataset, each row corresponds to a checklist, including the date, time, location, effort (e.g. distance traveled, time spent, etc.), and any additional checklist-level information.

For this workshop, and extract of the ERD is provided for Chile in the workshop data package. The observations and checklsits datasets are provided in [parquet format](https://parquet.apache.org/), an open source standard for efficient storage and retrieval of tabular data. If you haven't already done so, following the [instructions in the Introduction](#sec-intro-setup) to create an RStudio project and download the workshop data package. The parquet files should be located at:

```         
data/ebird_observations_chile_2021.parquet
data/ebird_checklists_chile_2021.parquet
```

Let's start by reading these two datasets into R using the `arrow` package and exploring them. We'll start with the checklist dataset.

```{r}
#| label: ebird-erd-checklists
library(arrow)
library(auk)
library(dplyr)
library(ebirdst)
library(ggplot2)
library(sf)
library(terra)

checklists <- read_parquet("data/ebird_checklists_chile_2021.parquet")
glimpse(checklists)
```

There are a huge number of columns in this data frame. The first set of variables provide standard information about the checklist: where and when did the observation occur, what type of search was conducted, and how much search effort was expended. Two important differences exist between these variables and what you will see if you look at the raw eBird dataset: when a GPS track is available we replace the checklist or hotspot location (latitude/longitude) with the centroid of the track and the time of the checklist is expressed as the difference between the checklist midpoint and solar noon, a more ecologically meaningful quantity.

All the remaining variables are not collected in eBird, they're calculated and added by the Status and Trends team based on external data sets. First, those variables beginning with `cds_`, provides information about the weather at the time of the observation, which can impact detectibility. This is followed by a large suite of environmental variables summarized over a 3km diameter circular neighborhood around the checklist location, including variables describing: elevation and topography, land and water cover, roads, and night time lights (a proxy for urban development). Most variables are summarized as two quantities expressing composition (what habitat is available) and configuration (how that habitat is arranged spatially). For continuous variables, such as elevation, we use the median and standard deviation. For categorical variables, such as land cover class, we use percent landcover (`pland`) and edge density (`ed`).

![Example of calculating percent land cover and edge density for a 3km diamter circular neighborhood centered on a checklist location. `pland` for each class is the percent of the circle covered by that class. To calculate `ed` for each class, we add up the perimeter lengths of all patches of that class, then divide by the area of the circle.](images/landscape-metrics.png)

The land and water cover variables can be challenging to interpret based on their names alone (e.g. `mcd12q1_lccs1_fs_c12_1500_pland`); however, these names can be looked up in the `ebirdst_predictors` data frame from the `ebirdst` package. For example, let's look up what `mcd12q1_lccs1_fs_c12_1500_pland` corresponds to.

```{r}
#| label: ebird-erd-predlookup
filter(ebirdst_predictors, predictor == "mcd12q1_lccs1_fs_c12_1500_pland") %>% 
  select(predictor, predictor_label)
```

::: callout-important
## Checkpoint

Take some time to explore the variables in the checklist dataset. Try looking up a variable in `ebirst_predictors`. Ask for help if you need clarification on the meaning of any of the variables.
:::

Now let's look at the observation dataset.

```{r}
#| label: ebird-erd-obs
observations <- read_parquet("data/ebird_observations_chile_2021.parquet")
glimpse(observations)
```

This is a much simpler dataset with only five columns:

-   `checklist_id`: unique identifier for the checklist that this observation belongs to. Allows joining the observation data to the checklist data.
-   `species_code`: unique identifier for the species that this observation was made for.
-   `valid`: a binary variable indicating is the observation was determined to be valid (`TRUE`) or invalid (`FALSE`) by the eBird reviewers.
-   `obs_detected`: a binary variable indicating if the species was detected (1) or not detected (0). Since this is a dataset of observations only, `obs_detected` is always 1; however, having this variable will become useful when we join to the checklist dataset in the next section.
-   `obs_count`: count of the number of individuals or an `NA` if no count was provided (if an "X" was entered for count on the eBird checklist).

::: callout-tip
## Tip

To look up the common name or scientific name of a species try appending the species code to the URL `https://ebird.org/species/`. For example, visit <https://ebird.org/species/eardov1> to look up the species code `eardov1`. This information is also available in the `ebird_taxonomy` data frame in the `auk` package.

```{r}
#| label: ebird-erd-species
filter(ebird_taxonomy, species_code == "eardov1") %>% 
  select(species_code, common_name, scientific_name, family)
```
:::

## Zero-filling eBird data {#sec-ebird-zf}

Complete eBird checklists are extremely valuable because, for all species that weren't reported, we can infer counts of 0. This allows us to convert eBird from presence only data to detection/non-detection data, which allows for much more robust analyses. Note that we don't use the term presence/absence data here because a non-detection doesn't necessarily imply the species was absent, only that observer wasn't able to detect and identify it.

We refer to the process of producing detection/non-detection data as "zero-filling" the eBird data because we're filling in the missing zeros. Let's consider observations of [Chucao Tapaculo](https://ebird.org/species/chutap1/) (species code `chutap1`).

```{r}
#| label: ebird-zf-det
chutap1_detections <- observations %>% 
  filter(species_code == "chutap1") %>% 
  select(checklist_id, valid, obs_detected, obs_count)
```

Next join this set of detections to the complete set of checklists, including detections and non-detections.

```{r}
#| label: ebird-zf-join
chutap1_all <- left_join(checklists, chutap1_detections, by = "checklist_id") %>%
  select(checklist_id, latitude, longitude, year, day_of_year,
         valid, obs_detected, obs_count)
head(chutap1_all)
```

Finally, for rows where Chucao Tapaculo was not detected we can replace the missing counts with 0. At this time, we recommend removing any checklists with `valid == 0` because there is uncertainty about whether or not the species was detected.

```{r}
#| label: ebird-zf-zf
chutap1_zf <- chutap1_all %>% 
  filter(is.na(valid) | valid == 1) %>% 
  mutate(
    # checklist not in the observations dataset are non-detections
    obs_detected = coalesce(obs_detected, 0L),
    # non-detections correspond to a count of 0
    obs_count = if_else(obs_detected == 1, obs_count, 0)
  )
```

We can now, for example, make a map of Chucao Tapaculo observations in the Chilean region of Los Lagos. We'll use spatial data that was prepared in advance and provided in the data package.

```{r}
#| label: ebird-zf-map
# load and project gis data
map_proj <- "+proj=laea +lat_0=-40 +lon_0=-72"
ne_land <- read_sf("data/gis-data.gpkg", "ne_land") %>% 
  st_transform(crs = map_proj) %>% 
  st_geometry()
ne_country_lines <- read_sf("data/gis-data.gpkg", "ne_country_lines") %>% 
  st_transform(crs = map_proj) %>% 
  st_geometry()
ne_state_lines <- read_sf("data/gis-data.gpkg", "ne_state_lines") %>% 
  st_transform(crs = map_proj) %>% 
  st_geometry()
los_lagos <- read_sf("data/gis-data.gpkg", "ne_states") %>% 
  filter(state_code == "CL-LL") %>% 
  st_transform(crs = map_proj) %>% 
  st_geometry()

# prepare ebird data for mapping
chutap1_sf <- chutap1_zf %>% 
  # convert to spatial points
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>% 
  st_transform(crs = map_proj)

# map
par(mar = c(0.25, 0.25, 0.25, 0.25))
# set up plot area
plot(st_geometry(los_lagos), col = NA, border = NA)
# contextual gis data
plot(ne_land, col = "#cfcfcf", border = "#888888", lwd = 0.5, add = TRUE)
plot(los_lagos, col = "#e6e6e6", border = NA, add = TRUE)
plot(ne_state_lines, col = "#ffffff", lwd = 0.75, add = TRUE)
plot(ne_country_lines, col = "#ffffff", lwd = 1.5, add = TRUE)
# ebird observations
# all
plot(chutap1_sf,
     pch = 19, cex = 0.1, col = scales::alpha("#555555", 4),
     add = TRUE)
# detection
plot(filter(chutap1_sf, obs_detected == 1),
     pch = 19, cex = 0.3, col = scales::alpha("#4daf4a", 1),
     add = TRUE)
# legend
legend("bottomright", bty = "n",
       col = c("#555555", "#4daf4a"),
       legend = c("eBird checklists", "Chucao Tapaculo sightings"),
       pch = 19)
box()
par(new = TRUE, mar = c(0, 0, 3, 0))
title("Chucao Tapaculo eBird Observations\nJune 2007-2021")
```

::: {.callout-caution icon="false"}
## Exercise

Try producing zero-filled, detection/non-detection data for another species.
:::

::: {.callout-note icon="false" collapse="true"}
## Solution

For example, to produce detection/non-detection data for [Thorn-tailed Rayadito](https://ebird.org/species/thtray1) use:

```{r}
#| label: sec-ebird-zf-sol
thtray1_zf <- observations %>% 
  filter(species_code == "thtray1") %>% 
  left_join(checklists, ., by = "checklist_id") %>% 
  filter(is.na(valid) | valid == 1) %>% 
  mutate(obs_detected = coalesce(obs_detected, 0),
         obs_count = if_else(obs_detected == 1, obs_count, 0)) %>% 
  select(checklist_id, obs_detected, obs_count)
head(thtray1_zf)
```
:::

## Prediction grid {#sec-ebird-pred}

The ultimate goal of modeling the occurrence or abundance of a species is frequently to produce a map showing the distribution of that species in space. To do so, we need to know the values of our predictor variables over the region that we intend to make predictions. To make this possible, the ERD is distributed with a **prediction grid**: a regular grid of points covering the entire globe spaced 3km apart for which all the environmental variables have been calculated for the year 2021. Internally, we often refer to this prediction grid as the Spatial Reference Dataset (SRD).

The data package for this course contains a subset of the prediction grid for Chile. The file `data/ebird_prediction-grid_chile_2021.parquet` contains the environmental variables for each point on the grid and the file `data/prediction-grid_template.tif` is a 3km by 3km raster template where each each cell center is a point on the prediction grid. Let's start by examining the environmental variables.

```{r}
#| label: ebird-pred-envvar
prediction_grid <- read_parquet("data/ebird_prediction-grid_chile_2021.parquet")
glimpse(prediction_grid)
```

These variables should be mostly familiar from the ERD, except for `srd_id` which is a unique identifier for each point on the grid. Next let's load the raster template using the `terra` package.

```{r}
#| label: ebird-pred-template
raster_template <- rast("data/prediction-grid_template.tif")
raster_template
```

This is a global 2.96km by 2.96km square grid in an equal area projection. We can use the `terra` function `rasterize` to insert values from the prediction grid into the template for mapping. For example, let's make a raster dataset of percent cover of evergreen broadleaf forest (`mcd12q1_lccs1_fs_c12_1500_pland`).

```{r}
#| label: ebird-pred-rasterize
forest_cover <- prediction_grid %>% 
  # convert to spatial object using sf
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>% 
  # transform to the coordinate reference system of the raster
  st_transform(crs = crs(raster_template)) %>% 
  # rasterize the points using the raster template
  rasterize(raster_template, field = "mcd12q1_lccs1_fs_c12_1500_pland")
```

Now we can make a simple map of evergreen broadleaf forest for Chile. Not that the raster template is global, but we can use `trim()` to remove all areas that have missing values for a map of Chile only.

```{r}
#| label: ebird-pred-map
plot(trim(forest_cover), axes = FALSE)
```

The map looks distorted because the prediction grid uses a sinusoidal projection, which works well for analysis but not for mapping. In the next lesson, we'll demonstrate how to project data into a coordinate reference system more suitable for mapping.

## Spatial and temporal bias {#sec-ebird-bias}

Despite the strengths of eBird data, species observations collected through citizen science projects exhibit both spatial and temporal bias requiring special care when using them for rigorous analyses. **Spatial bias** occurs because eBird participants are more likely to be collect data near their homes, in easily accessible areas such as roadsides, or in areas known to be good for birding. Looking at the above map of Chucao Tapaculo observations it's clear that the eBird checklists are clustered around cities and roads. **Temporal bias** occurs because participants preferentially collect data when they are available, such as weekends, and at times of year when they expect to observe more birds, notably during the breeding season. We can plot the distribution of checklists over the days of the year to see this bias:

```{r}
#| label: sec-ebird-bias-dayplot
checklist_per_day <- checklists %>% 
  filter(day_of_year < 366) %>% 
  count(day_of_year)
ggplot(checklist_per_day) +
  aes(x = day_of_year, y = n) +
  geom_line() +
  scale_y_continuous(labels = scales::comma) +
  labs(x = "Day of Year", y = "# checklists",
       title = "Daily eBird checklists submission") +
  theme_gray()
```

Three is a clear seasonal pattern to the number of eBird checklists submitted (fewer checklists in the winter) as well as daily and weekly variation within seasons. In addition, there are two huge spikes in checklists submissions, one in May and the other in October, what do you think could be causing these sudden increases?

Finally, for most species, there is strong **class imbalance** in the data, meaning there are usually many more non-detections than detections. As a results, a distribution model predicting that the species is absent everywhere will have high accuracy, but no ecological value. For example, the prevalence rate of Chucao Tapaculo in Chile is only `r scales::percent(mean(chutap1_zf$obs_detected))`.

```{r}
#| label: sec-ebird-bias-prev
mean(chutap1_zf$obs_detected)
```

To address these three issues (spatial bias, temporal bias, and class imbalance) we recommend subsampling the data using a technique called **case controlled grid sampling**. We overlay an equal area 3km by 3km grid over the checklists, then sample one detection and one non-detection from each grid cell for each week of each year. Let's look at a simple example of how spatial grid sampling works."

![1. Take one week of eBird observations. Detections are show in [**green**]{style="color:#4daf4a"} and non-detections are shown in [**gray**]{style="color:#555555"}.](images/grid-sampling_1.png)

![2. Separate the detections and non-detections. In this example, there is a higher density of observations in the lower right corner of the region and the prevalence of detections is 2%.](images/grid-sampling_2.png)

![3. Overlay an equal area grid on top of the points, For Status and Trends we use a 3km by 3km grid.](images/grid-sampling_3.png)

![4. Sample one checklist from each grid cell.](images/grid-sampling_4.png)

![5. Recombine the detections and non-detections. The observations are much more evenly distributed in space and the prevalence of detections has increased from 2% to 20%.](images/grid-sampling_5.png)

The function `grid_sample_stratified()` from the `ebirdst` package is specifically designed to perform case controlled grid sampling on eBird data. For example, let's apply this technique to the Chucao Tapaculo observations.

```{r}
#| label: sec-ebird-bias-sample
# perform case controlled grid sampling
chutap1_sampled <- grid_sample_stratified(chutap1_zf, 
                                          obs_column = "obs_detected")

# how many checklists were removed?
nrow(chutap1_zf)
nrow(chutap1_sampled)

# how has prevalence changed
mean(chutap1_zf$obs_detected)
mean(chutap1_sampled$obs_detected)
```

So, after sampling, we're left with `r scales::percent(nrow(chutap1_sampled) / nrow(chutap1_zf))` of the observations we started with, but the spatial and temporal bias has been significantly reduced.

We now have the data and tools necessary to model relative abundance using eBird data, which will be the focus of [Lesson -@sec-abundance].
